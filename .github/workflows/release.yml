name: Release

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  release:
    # Only run on merged PRs or direct pushes to main with tags
    if: (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')) || 
        (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    needs: ['lint', 'test']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Important for tags and history
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24.x'
      
      # If PR is merged, create and push tag
      - name: Create tag on PR merge
        if: github.event_name == 'pull_request' && github.event.pull_request.merged == true
        run: |
          # Optional: Extract version from PR title or body
          VERSION=$(echo "${{ github.event.pull_request.title }}" | grep -oP '\[release v\d+\.\d+\.\d+\]' | grep -oP 'v\d+\.\d+\.\d+')
          
          # If no version in PR title, increment patch version
          if [ -z "$VERSION" ]; then
            LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
            MAJOR=$(echo $LATEST_TAG | cut -d. -f1 | sed 's/v//')
            MINOR=$(echo $LATEST_TAG | cut -d. -f2)
            PATCH=$(echo $LATEST_TAG | cut -d. -f3)
            NEW_PATCH=$((PATCH + 1))
            VERSION="v$MAJOR.$MINOR.$NEW_PATCH"
          fi
          
          echo "Creating new tag: $VERSION"
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a $VERSION -m "Release $VERSION from PR #${{ github.event.pull_request.number }}"
          git push origin $VERSION

      # Run GoReleaser
      - name: Run GoReleaser
        if: startsWith(github.ref, 'refs/tags/v')
        uses: goreleaser/goreleaser-action@v5
        with:
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}